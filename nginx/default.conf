proxy_cache_path /tmp/cache levels=1:2 keys_zone=cache:10m max_size=500m inactive=60m use_temp_path=off;
proxy_cache_path /tmp/uploads-thumb levels=1:2 keys_zone=uploads_thumb:10m max_size=50G;

server {
  listen 80;

  root /usr/share/nginx/html;

  location / {
    proxy_pass http://$FLASK_SERVER_ADDR;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location /cache-me {
    proxy_pass http://$FLASK_SERVER_ADDR;
    proxy_cache cache;
    proxy_cache_lock on;
    proxy_cache_valid 200 30s;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_revalidate on;
    proxy_cache_background_update on;
    expires 20s;
  }

  location /health-check {
    add_header Content-Type text/plain;
    return 200 "success";
  }


  location /out_diffusion {
    expires 7d;
    gzip_static on;

    add_header Cache-Control public;
    add_header X-Pownered "nginx_image_filter";
    # HTTP Response Header adds the hit status of proxy_cache for later debugging and problem checking
    add_header X-Cache-Status $upstream_cache_status;

    proxy_pass http://127.0.0.1/_img/uploads;
    # Cache thumbnails in services to avoid regeneration of each request
    proxy_cache uploads_thumb;
    # Ignore proxy_cache when receiving HTTP Header Pragma: no-cache
    # This configuration allows browsers to regenerate thumbnails by ignoring proxy_cache when forced to refresh
    proxy_cache_bypass $http_pragma;
    # Since Upload files generally have no parameters, host + document_uri has been used as
    proxy_cache_key "$host$document_uri";
    # Valid files, cached on server for 7 days
    proxy_cache_valid 200 7d;
    proxy_cache_use_stale error timeout invalid_header updating;
    proxy_cache_revalidate on;
    # Processing error of proxy
    proxy_intercept_errors on;
    error_page   415 = /assets/415.png;
    error_page   404 = /assets/404.png;
  }

  # Original picture
  location /_img/uploads {
    alias /usr/share/nginx/html/out_diffusion;
    expires 7d;
  }

  # thumbnail
  location ~* /_img/uploads/(.+)!(large|lg|md|sm|xs)$ {
    set $filename /out_diffusion/$1;

    if (-f $filename) {
      break;
    }

    # Prepare the required parameters (width, height, cropping or zooming) according to the URL address!
    set $img_version $2;
    set $img_type resize;
    set $img_w    -;
    set $img_h    -;
    if ($img_version = 'large') {
      set $img_type resize;
      set $img_w    1920;
    }
    if ($img_version = 'lg') {
      set $img_type crop;
      set $img_w    192;
      set $img_h    192;
    }
    if ($img_version = 'md') {
      set $img_type crop;
      set $img_w    96;
      set $img_h    96;
    }
    if ($img_version = 'sm') {
      set $img_type crop;
      set $img_w    48;
      set $img_h    48;
    }
    if ($img_version = 'xs') {
      set $img_type crop;
      set $img_w    32;
      set $img_h    32;
    }
    rewrite ^ /_$img_type;
  }

  # Processing of Scaled Pictures
  location /_resize {
    alias /usr/share/nginx/html$filename;
    image_filter resize $img_w $img_h;
    image_filter_jpeg_quality 95;
    image_filter_buffer         20M;
    image_filter_interlace      on;
  }

  # Processing of clipped pictures
  location /_crop {
    alias /usr/share/nginx/html$filename;
    image_filter crop $img_w $img_h;
    image_filter_jpeg_quality 95;
    image_filter_buffer         20M;
    image_filter_interlace      on;
  }
}
